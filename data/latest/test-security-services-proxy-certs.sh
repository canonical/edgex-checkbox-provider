#!/bin/bash -e

# This test validates that the API gateway (aka Kong) is supported by
# the edgexfoundry snap. There are two test scenarios:
# 1. validate that by default a self-signed cert is being used for TLS;
# 2. validate CA-signed TLS certificate can be used for TLS.

# get the directory of this script
# snippet from https://stackoverflow.com/a/246128/10102404
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

# load the latest release utils
# shellcheck source=/dev/null
source "$SCRIPT_DIR/utils.sh"

DEFAULT_TEST_CHANNEL=${DEFAULT_TEST_CHANNEL:-beta}

# FIXME: The Ireland release no longer initializes an EdgeX CA used to
# sign the TLS certificates for Kong or Vault. As of Ireland, TLS is no
# longer used for connections to Vault per:
#
# https://github.com/edgexfoundry/edgex-docs/blob/master/docs_src/design/adr/security/0015-in-cluster-tls.md
#
# As for Kong, EdgeX now by default relies on a self-signed certificates
# generated by Kong on install for TLS. Production TLS certs can be
# configured using the EdgeX security-config command or via the configure
# hook. Finally, the Kong Admin API has also been locked down so this test
# as written will not work unless the Kong Admin API token is used. In
# theory, it should be possible to just copy this token from $SNAP_DATA for
# use by this script. So this test requires the following changes before it
# can be enabled:
#
# - If Kong Admin API is still used, copy or reference the appropriate token
#   from w/in SNAP_DATA. Another option would be to change this script to use
#   the non-Admin API, however the best solution would be to test both.
#
# - Change this test to ensure that by default a self-signed cert is being
#   used for TLS (i.e. use -k or --insecure to disable verification of peer),
#   again for one or both APIs (i.e. Admin & non-Admin).
#
# - Add test logic to configure a non-self-signed TLS cert for one or both
#   APIs and validate that the correct cert is configured using the same
#   approach as used in Hanoi and earlier versions of this test.

snap_remove

if [ -n "$REVISION_TO_TEST" ]; then
    echo "Installing snap from locally cached version"
    snap_install "$REVISION_TO_TEST" "$REVISION_TO_TEST_CHANNEL" "$REVISION_TO_TEST_CONFINEMENT"
else
    echo "Installing snap from channel"
    snap_install edgexfoundry "$DEFAULT_TEST_CHANNEL" 
fi

# wait for services to come online
snap_wait_all_services_online

# Due to confinement issues when running this test, we write the private key to SNAP_DATA
EDGEXFOUNDRY_SNAP_DATA="/var/snap/edgexfoundry/current/checkbox"
mkdir -p $EDGEXFOUNDRY_SNAP_DATA

echo "Generating private key"
openssl ecparam -genkey -name prime256v1 -noout -out $EDGEXFOUNDRY_SNAP_DATA/private.pem
echo "Generating public key"
openssl ec -in $EDGEXFOUNDRY_SNAP_DATA/private.pem -pubout -out $EDGEXFOUNDRY_SNAP_DATA/public.pem
PUBLIC_KEY=$(< $EDGEXFOUNDRY_SNAP_DATA/public.pem)
 
echo "Setting security-proxy user"
snap set edgexfoundry env.security-proxy.user=user01,USER_ID,ES256
echo "Setting security-proxy public key"
snap set edgexfoundry env.security-proxy.public-key="$PUBLIC_KEY"

echo "Generating JWT"
# this command doesn't write errors to stderr. Check the exit code before using the output:
if ! OUT=$(edgexfoundry.secrets-config proxy jwt --algorithm ES256 --private_key $EDGEXFOUNDRY_SNAP_DATA/private.pem --id USER_ID --expiration=1h)
then
    >&2 echo $OUT
    exit 1
fi
TOKEN=$OUT

echo "Got Token: $TOKEN"

# note: we need to use "edgexfoundry.curl", not "curl" to correctly support TLS 1.2

echo "Verifying self-signed TLS certificate"
code=$(edgexfoundry.curl --insecure --show-error --silent --include \
    --output /dev/null --write-out "%{http_code}" \
    -X GET 'https://localhost:8443/core-data/api/v2/ping?' \
    -H "Authorization: Bearer $TOKEN") 
if [[ $code != 200 ]]; then
    >&2 echo "self-signed Kong TLS verification test failed with $code"
    snap_remove
    exit 1
else
    echo "Self-signed TLS verification test succeeded"
fi

# restart all of EdgeX (including the security-services) and make sure the same certificate still works
echo "Restarting (disable+enable) edgexfoundry"
snap disable edgexfoundry > /dev/null
snap enable edgexfoundry > /dev/null

# wait for services to come online
snap_wait_all_services_online

# recheck
echo "Re-verifying the self-signed TLS certificate"
code=$(edgexfoundry.curl --insecure --show-error --silent --include \
    --output /dev/null --write-out "%{http_code}" \
    -X GET 'https://localhost:8443/core-data/api/v2/ping?' \
    -H "Authorization: Bearer $TOKEN")
if [[ $code != 200 ]]; then
    >&2 echo "self-signed Kong TLS verification test failed with $code"
    snap_remove
    exit 1
else
    echo "Self-signed TLS verification recheck test succeeded"
fi

echo "Installing edgeca if missing"
if [ -z "$(snap list edgeca)" ]; then
    snap install edgeca
    edgeca_is_installed=true
    echo "edgeca installed"
fi

# wait for edgeca service to come online
snap_wait_port_status 50025 open

# generate CA-signed TLS certificate
# We are running the test script with 'sudo' and although the edgeca snap has the home interface, 
# which allows access to the home directory, when running as sudo, the user is root, 
# so it has a different home directory and doesn't have write access to your home directory. 
# It's therefore easiest to use the $SNAP_DATA directory of the EdgeCA snap:
EDGECA_DIR="/var/snap/edgeca/current"
echo "Generating CSR"
edgeca gencsr --cn localhost --csr $EDGECA_DIR/csrfile --key $EDGECA_DIR/csrkeyfile
echo "Generating certificate"
edgeca gencert -o $EDGECA_DIR/localhost.cert -i $EDGECA_DIR/csrfile -k $EDGECA_DIR/localhost.key
EDGECA_CERT=$(< $EDGECA_DIR/localhost.cert)
EDGECA_KEY=$(< $EDGECA_DIR/localhost.key)

echo "Setting security-proxy certificate "
snap set edgexfoundry env.security-proxy.tls-certificate="$EDGECA_CERT"
echo "Setting security-proxy certificate private key"
snap set edgexfoundry env.security-proxy.tls-private-key="$EDGECA_KEY" 

# the CA certificate needs to be where edgexfoundry.curl can read it
echo "Copying CA certificate"
cp $EDGECA_DIR/CA.pem $EDGEXFOUNDRY_SNAP_DATA/

echo "Verifying CA-signed TLS certificate"
# this should not use "--insecure" as we are providing a cacert
code=$(edgexfoundry.curl --show-error --silent --include \
    --output /dev/null --write-out "%{http_code}" \
    --cacert $EDGEXFOUNDRY_SNAP_DATA/CA.pem \
    -X GET 'https://localhost:8443/core-data/api/v2/ping?' \
    -H "Authorization: Bearer $TOKEN")
if [[ $code != 200 ]]; then
    >&2 echo "CA-signed Kong TLS verification test failed with $code"
    snap_remove
    exit 1
else
    echo "CA-signed Kong TLS verification test succeeded"
fi

# restart all of EdgeX (including the security-services) and make sure the same certificate still works
echo "Restarting (disable+enable) edgexfoundry"
snap disable edgexfoundry > /dev/null
snap enable edgexfoundry > /dev/null

# wait for services to come online
snap_wait_all_services_online

# recheck
echo "Re-verifying CA-signed TLS certificate"
code=$(edgexfoundry.curl --show-error --silent --include \
    --output /dev/null --write-out "%{http_code}" \
    --cacert $EDGEXFOUNDRY_SNAP_DATA/CA.pem \
    -X GET 'https://localhost:8443/core-data/api/v2/ping?' \
    -H "Authorization: Bearer $TOKEN")
if [[ $code != 200 ]]; then
    >&2 echo "CA-signed Kong TLS verification test failed with $code"
    snap_remove
    exit 1
else
    echo "CA-signed Kong TLS verification recheck test succeeded"
fi

echo "All done. Cleaning up"
# remove the snap to run the next test
snap_remove

# remove the edgeca if we installed it
if [ "$edgeca_is_installed" = true ] ; then
    snap remove --purge edgeca
    echo "edgeca removed"
fi

